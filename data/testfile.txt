Java Programming: Principles of Software Design
Programming Exercise: Interface and Abstract Class
In this task you will add in a common interface. You will need to keep a copy of your previous
program, so that you will have the old version for the quizzes. The new version will organize the
program in a different way, using an interface and an abstract class. You will also use a different
class in place of the MarkovRunnerclass to run the program in a different way to take
advantage of the new structure.
For this assignment we will give you an incomplete program with some new files. You should
look at each of these and understand their parts. They are:
The IMarkovModelinterface. It has two signatures: the void method setTrainingthat
has one String parameter named text, and the method getRandomTextthat has one int
parameter named numCharsand returns a String.
The class MarkovRunnerWithInterfacefor running your program to generate random
text. This class has several methods:
○ A void method named runModelthat has three parameters: an IMarkovModel
variable named markov, a String named textand an int named size. This
method will work with any markovobject that implements IMarkovModel.
○ A void method named runMarkov. This method creates one of the types of
Markov models, and calls runModelwith it to generate random text.
○ A void method named printOutthat formats and prints the randomly generated
text.
The abstract class AbstractMarkovModelthat implements IMarkovModel. This class
has several items:
○ Two protected fields myText, a String, and myRandom,of type Random.
○ A constructor that creates myRandom.
○ A setTrainingmethod that is public. This method sets the the private String
variable myTextto the parameter text.
○ A signature for the abstract method getRandomTextthat has one integer
parameter named numCharsindicating the length of the randomly generated
text.
Java Programming: Principles of Software Design
Assignment 1: IMarkovModel Interface
Specifically, for this assignment, you will:
Copy over four of the .java files from the the work you did with the previous assignment.
(You will need to keep a copy of the program you created from the first two assignments
for testing.) Specifically you should copy over the four Java files: MarkovZero.java,
MarkovOne.java, MarkovFour.java, and MarkovModel.java. You can ignore the following
files from the previous lesson—MarkovRunner.java and Tester.java. We will modify the
program to organize it in a different way, using an interface and an abstract class.
● Modify your classes MarkovZero,MarkovOne,MarkovFour, and MarkovModelto
implement the IMarkovModelinterface. Each of these classes should already have the
two required methods setTrainingand getRandomText, so the only change needed is
the first line to add
implements IMarkovModel
● Run the method runMarkovthat is in the MarkovRunnerWithInterfaceclass. This
method should run several Markov objects and generate random text for a MarkovZero,
a MarkovOne, a MarkovModel with number 3, and a MarkovFour. Notice that
runMarkovis called with each one of these. You can observe that the text gets more
like the training text as you move from MarkovZero to MarkovFour.
Java Programming: Principles of Software Design
Assignment 2: AbstractMarkovModel Abstract Class
Now we will integrate the AbstractMarkovModelabstract class—you will need to make several
changes, specifically:
● The method getFollowsyou wrote is the same everywhere. You should move it into the
AbstractMarkovModelclass and change this method from public to protected.
● Anything that is protected in AbstractMarkovModelshould be deleted in the other files
they are in. In each of MarkovZero, MarkovOne, MarkovFour and MarkovModel, delete
the declarations of the two private variables myTextand myRandom, and delete the
getFollowsmethod if it has one.
● Each of MarkovZero, MarkovOne, MarkovFour, and MarkovModel need to change in
their definition “implements IMarkovModel” to “extends AbstractMarkovModel”
● Run the method runMarkovthat is in the MarkovRunnerWithInterfaceclass. It should
run as before.
● Notice that when you print any markovobject, you get its name and an address
location. These objects don’t know how to print themselves. Write a toStringmethod, so
each one prints out “MarkovModel of order n,” where n is the number. For example, a
MarkovFour object should print out “MarkovModel of order 4.”
● Modify your program so that you can set a seed in the runMarkovmethod in the
MarkovRunnerWithInterfaceclass and pass it to the runModelmethod (add a 4th
parameter named seed) to set the random seed for any markovobject. In the runModel
class you should be able to set this seed with the line:
markov.setRandom(seed).
If you try this you get a compile error. What changes in other files will you need to make
to get this to work?
Java Programming: Principles of Software Design
Assignment 3: HashMap for Efficiency
It was noted that the getRandomTextmethod is inefficient. Suppose it sees the String “he” 50
times. Each time, it will calculate the follow set again, which could take a long time, each time if
the training text is long.
Specifically, you should:
● Write a new class named EfficientMarkovModel(make a copy of MarkovModel to start
with) that extends AbstractMarkovModel and that builds a HashMap to calculate the
followsArrayList for each possible substring only once, and then uses the HashMap to
look at the list of characters following when it is needed. This class should include:
○ a toStringmethod to print that this is the EfficientMarkovModel class of a specific
number
○ a method named buildMapto build the HashMap (Be sure to handle the case
where there may not be a follow character. If that key is not in the HashMap yet,
then it should be put in mapped to an empty ArrayList.) Think carefully about
where to call this method, considering that you will want to build a map for each
new training text.
○ a getFollowsmethod, but this getFollowsmethod should be much shorter, as it
can look up the ArrayList of Strings, instead of computing it each time.
● To test your HashMap to make sure it is built correctly, write the void method
printHashMapInfoin the EfficientMarkovModel class. Make sure to call this method
immediately after building the map. This method should print out the following
information about the HashMap:
○ Print the HashMap (all the keys and their corresponding values). Only do this if
the HashMap is small.
○ Print the number of keys in the HashMap
○ Print the size of the largest value in the HashMap—that is, the size of the largest
ArrayList of characters
○ Print the keys that have the maximum size value.
● Write a new method named testHashMapin the MarkovRunnerWithInterface class. This
method should create an order­2 EfficientMarkovModel with
○ seed 42
Java Programming: Principles of Software Design
○ the training text is “yes­this­is­a­thin­pretty­pink­thistle”
○ the size of the text generated is 50
○ Note that “le” occurs only once at the end of the training text
● In the MarkovRunnerWithInterface class, call testHashMap. You should see that the
HashMap has the following information:
○ It has 25 keys in the HashMap
○ The maximum number of keys following a key is 3
○ Keys that have the largest ArrayList (of size 3 in this case) are: “hi”, “s­”, “­t”, “is”,
and “th”
○ After running it, you’ll probably want to comment out the call to
printHashMapInfo in the EfficientMarkovModel class.
● In the MarkovRunnerWithInterface class, create a void method named
compareMethodsthat runs a MarkovModel and an EfficientMarkovModel. In particular,
○ Make both order­2 Markov models
○ Use seed 42 and set the length of text to generate to be 1000
○ Both should call runModelthat generates random text three times for each.
○ Run the MarkovModel first and then the EfficientMarkovModel with the file
“hawthorne.txt” as the training text. One of them should be noticeably faster. You
can calculate the time each takes by using System.nanoTime()for the current
time.